import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

class SwimTeamTester {

	@Test
	void testSwimTeam() {
		SwimTeam testTeam = new SwimTeam();
		assertEquals(testTeam.getTeamID(), 0);
		assertEquals(testTeam.getTeamName(), "");
		assertArrayEquals(testTeam.getMenTeam(), new Swimmer[0]);
		assertArrayEquals(testTeam.getWomenTeam(), new Swimmer[0]);
	}

	@Test
	void testSwimTeamIntStringSwimmerArraySwimmerArray() {
		Swimmer male1 = new Swimmer(0, "", true, new Event[0]);
		Swimmer male2 = new Swimmer(1, "", true, new Event[0]);
		
		Swimmer female1 = new Swimmer(2, "", false, new Event[0]);
		Swimmer female2 = new Swimmer(3, "", false, new Event[0]);
		
		Swimmer[] menTeam = { male1, male2 };
		Swimmer[] womenTeam = { female1, female2 };
		
		SwimTeam testTeam = new SwimTeam(11943, "Testing team", menTeam, womenTeam);
		assertEquals(testTeam.getTeamID(), 11943);
		assertEquals(testTeam.getTeamName(), "Testing team");
		assertArrayEquals(testTeam.getMenTeam(), menTeam);
		assertArrayEquals(testTeam.getWomenTeam(), womenTeam);
	}

	@Test
	void testGetTeamID() {
		fail("Not yet implemented");
	}

	@Test
	void testSetTeamID() {
		fail("Not yet implemented");
	}

	@Test
	void testGetTeamName() {
		fail("Not yet implemented");
	}

	@Test
	void testSetTeamName() {
		fail("Not yet implemented");
	}

	@Test
	void testGetMenTeam() {
		fail("Not yet implemented");
	}

	@Test
	void testSetMenTeam() {
		fail("Not yet implemented");
	}

	@Test
	void testGetWomenTeam() {
		fail("Not yet implemented");
	}

	@Test
	void testSetWomenTeam() {
		fail("Not yet implemented");
	}

	@Test
	void testAddMenMember() {
		fail("Not yet implemented");
	}

	@Test
	void testAddWomenMember() {
		fail("Not yet implemented");
	}

}
